// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/workApi/workApi.proto

package go_micro_api_workApi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Workers service

func NewWorkersEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Workers service

type WorkersService interface {
	CreateWorker(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateWorker(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteWorkerByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	FindWorkerByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	FindWorkerByName(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	FindWorkerByNums(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//rpc CreateToken(Request)	returns(Response);
	FindAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type workersService struct {
	c    client.Client
	name string
}

func NewWorkersService(name string, c client.Client) WorkersService {
	return &workersService{
		c:    c,
		name: name,
	}
}

func (c *workersService) CreateWorker(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Workers.CreateWorker", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersService) UpdateWorker(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Workers.UpdateWorker", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersService) DeleteWorkerByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Workers.DeleteWorkerByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersService) FindWorkerByID(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Workers.FindWorkerByID", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersService) FindWorkerByName(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Workers.FindWorkerByName", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersService) FindWorkerByNums(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Workers.FindWorkerByNums", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workersService) FindAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Workers.FindAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Workers service

type WorkersHandler interface {
	CreateWorker(context.Context, *Request, *Response) error
	UpdateWorker(context.Context, *Request, *Response) error
	DeleteWorkerByID(context.Context, *Request, *Response) error
	FindWorkerByID(context.Context, *Request, *Response) error
	FindWorkerByName(context.Context, *Request, *Response) error
	FindWorkerByNums(context.Context, *Request, *Response) error
	//rpc CreateToken(Request)	returns(Response);
	FindAll(context.Context, *Request, *Response) error
}

func RegisterWorkersHandler(s server.Server, hdlr WorkersHandler, opts ...server.HandlerOption) error {
	type workers interface {
		CreateWorker(ctx context.Context, in *Request, out *Response) error
		UpdateWorker(ctx context.Context, in *Request, out *Response) error
		DeleteWorkerByID(ctx context.Context, in *Request, out *Response) error
		FindWorkerByID(ctx context.Context, in *Request, out *Response) error
		FindWorkerByName(ctx context.Context, in *Request, out *Response) error
		FindWorkerByNums(ctx context.Context, in *Request, out *Response) error
		FindAll(ctx context.Context, in *Request, out *Response) error
	}
	type Workers struct {
		workers
	}
	h := &workersHandler{hdlr}
	return s.Handle(s.NewHandler(&Workers{h}, opts...))
}

type workersHandler struct {
	WorkersHandler
}

func (h *workersHandler) CreateWorker(ctx context.Context, in *Request, out *Response) error {
	return h.WorkersHandler.CreateWorker(ctx, in, out)
}

func (h *workersHandler) UpdateWorker(ctx context.Context, in *Request, out *Response) error {
	return h.WorkersHandler.UpdateWorker(ctx, in, out)
}

func (h *workersHandler) DeleteWorkerByID(ctx context.Context, in *Request, out *Response) error {
	return h.WorkersHandler.DeleteWorkerByID(ctx, in, out)
}

func (h *workersHandler) FindWorkerByID(ctx context.Context, in *Request, out *Response) error {
	return h.WorkersHandler.FindWorkerByID(ctx, in, out)
}

func (h *workersHandler) FindWorkerByName(ctx context.Context, in *Request, out *Response) error {
	return h.WorkersHandler.FindWorkerByName(ctx, in, out)
}

func (h *workersHandler) FindWorkerByNums(ctx context.Context, in *Request, out *Response) error {
	return h.WorkersHandler.FindWorkerByNums(ctx, in, out)
}

func (h *workersHandler) FindAll(ctx context.Context, in *Request, out *Response) error {
	return h.WorkersHandler.FindAll(ctx, in, out)
}
